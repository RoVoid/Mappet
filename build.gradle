buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url = 'https://maven.minecraftforge.net/' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.73'
        classpath "org.apache.maven.plugins:maven-resources-plugin:3.2.0"
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'


group = "mchorse.mappet"
archivesBaseName = "Mappet"
sourceCompatibility = targetCompatibility = "1.8"
compileJava.options.encoding = 'UTF-8'

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    accessTransformer = file('src/main/resources/META-INF/mappet_at.cfg')

    runs {
        client {
            workingDirectory project.file("run")
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--username', 'Dev'
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly files("run/libs/blockbuster-${blockbuster}-${mcversion}-dev.jar")
    compileOnly files("run/libs/metamorph-${metamorph}-${mcversion}-dev.jar")
    compileOnly files("run/libs/mclib-${mclib}-${mcversion}-dev.jar")
    compileOnly files("run/libs/aperture-${aperture}-${mcversion}-dev.jar")
    compileOnly files("run/libs/chameleon-${chameleon}-${mcversion}-dev.jar")
    compileOnly files("run/libs/nashorn.jar")

    implementation ('org.reflections:reflections:0.9.12')
    implementation ('org.slf4j:slf4j-api:1.7.32')
    implementation ('org.javassist:javassist:3.28.0-GA')
    implementation ('org.ow2.asm:asm:5.2') { force = true }
    implementation ('org.ow2.asm:asm-tree:5.2') { force = true }
    implementation ('org.ow2.asm:asm-util:5.2') { force = true }

    implementation("net.minecraftforge:mergetool:0.2.3.3") { force = true }
}

jar.finalizedBy('shadowJar')
jar.finalizedBy('reobfJar')
jar.finalizedBy('moveToExportFolder')

import org.apache.tools.ant.filters.ReplaceTokens

tasks.register('processSource', Sync) {
    outputs.upToDateWhen { false }

    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [MAPPET     : version,
                                   MCLIB      : mclib,
                                   METAMORPH  : metamorph,
                                   BLOCKBUSTER: blockbuster,
                                   APERTURE   : aperture,
                                   CHAMELEON   : chameleon])
    into "$buildDir/src"
}

compileJava {
    source = processSource.outputs
}

//tasks.jar.enabled = false

tasks.register('moveToExportFolder', Copy) {
    from "build/libs/Mappet-${version}.jar"
    into "exports"
}


shadowJar {
    dependencies {
        include(dependency("org.reflections:reflections:0.9.12"))
        include(dependency("org.slf4j:slf4j-api:1.7.32"))
        include(dependency("org.javassist:javassist:3.28.0-GA"))
    }

    archiveClassifier.set("")

    def dependenciesToRelocate = ["org.reflections",
                                  "org.slf4j",
                                  "javassist"]

    for (dependency in dependenciesToRelocate) {
        relocate dependency, "mchorse.mappet.libs." + dependency
    }
}

tasks.register('prepareAssets', Copy) {
    group = 'build'

    project.version = version

    inputs.property 'version', version
    inputs.property "mcversion", mcversion

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand(project.properties)
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    into project.file('build/classes/java/main')
}

classes.dependsOn(prepareAssets)

tasks.withType(Jar).configureEach { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

/* Comparing keys */
tasks.register('compareLangFiles') {
    doLast {
        def help = file("src/main/resources/assets/${project.archivesBaseName}/lang/")
        def parse = { File file ->
            def map = new HashMap()
            def splits = file.text.split("\n")

            for (split in splits) {
                def index = split.indexOf("=")

                if (index == -1) {
                    continue
                }

                map.put(split.substring(0, index), true)
            }

            return map
        }

        if (!help.exists()) {
            return
        }

        def en = file("${help.getAbsolutePath()}/en_US.lang")
        def en_map = parse(en)

        for (lang_file in help.listFiles()) {
            if (!lang_file.name.endsWith(".lang") || lang_file.name.startsWith("en_US")) {
                continue
            }

            def lang_map = parse(lang_file)
            def missing = new ArrayList()
            def extra = new ArrayList()

            for (key in en_map.keySet()) {
                if (!lang_map.containsKey(key)) {
                    missing.add(key)
                }
            }

            for (key in lang_map.keySet()) {
                if (!en_map.containsKey(key)) {
                    extra.add(key)
                }
            }

            missing.sort()
            extra.sort()

            print("\n")

            if (!missing.isEmpty() || !extra.isEmpty()) {
                if (!missing.isEmpty()) {
                    print("Language file ${lang_file.getName()} misses following keys:\n")

                    for (key in missing) {
                        print("- ${key}\n")
                    }
                }

                if (!extra.isEmpty()) {
                    print("Language file ${lang_file.getName()} has additional keys:\n")

                    for (key in extra) {
                        print("- ${key}\n")
                    }
                }
            } else {
                print("Language file ${lang_file.getName()} fully matches ${en.getName()}!\n")
            }
        }
    }
}

tasks.register('copyLangStrings') {
    doLast {
        def parse = { File file ->
            def map = new HashMap()
            def splits = file.text.split("\n")

            for (split in splits) {
                def index = split.indexOf("=")

                if (index == -1) {
                    continue
                }

                map.put(split.substring(0, index), split.substring(index + 1))
            }

            return map
        }

        def help = file("src/main/resources/assets/${project.archivesBaseName}/lang/")
        def en = file("${help.getAbsolutePath()}/en_US.lang")

        for (file in help.listFiles()) {
            if (file.name.endsWith(".lang") && !file.name.startsWith("en_")) {
                def strings = parse(file)
                def splits = en.text.split("\n")

                for (def i = 0; i < splits.length; i++) {
                    def str = splits[i]

                    if (str.contains("=")) {
                        def index = str.indexOf("=")
                        def key = str.substring(0, index)

                        if (strings.containsKey(key)) {
                            splits[i] = key + "=" + strings.get(key)
                        }
                    }
                }

                file.write(splits.join("\n"))

                print("Wrote to ${file.name}...")
            }
        }

        print("Done!")
    }
}

tasks.register('scriptingJavadocsJson', Exec) {
    group = "build"

    executable "javadoc"
    args "-doclet", "robot.utils.doclets.JsonDoclet", "-docletpath", "./run/jsonDoclet-1.1.jar", "-sourcepath", "./src/main/java/", "-subpackages", "mchorse.mappet.api.scripts.user:mchorse.mappet.api.ui.components:mchorse.mappet.client.gui.utils.graphics"

    doLast {
        def tempJson = file("docs.json")
        def targetJson = file("src/main/resources/assets/mappet/docs/en_us.json")

        if (tempJson.exists()) {
            targetJson.setText(tempJson.text)
            tempJson.delete()
        }
    }
}

tasks.processResources.dependsOn(scriptingJavadocsJson)


import groovy.json.JsonOutput

def iconsDir = file("src/main/resources/assets/mappet/textures/gui/icons")
def iconsJson = file("src/main/resources/assets/mappet/icons.json")

tasks.register('generateIconsJson') {
    group = "build"

    inputs.dir(iconsDir)
    outputs.file(iconsJson)

    doLast {
        def iconsList = []

        if (iconsDir.exists()) {
            iconsDir.eachFileRecurse { file ->
                if (file.isFile() && file.name.endsWith(".png")) {
                    def relativePath = iconsDir.toPath().relativize(file.toPath()).toString().replace('\\', '/')
                    iconsList << relativePath.substring(0, relativePath.length() - 4)
                }
            }
        }

        iconsList.sort()
        def json = JsonOutput.prettyPrint(JsonOutput.toJson(iconsList))

        iconsJson.parentFile.mkdirs()
        iconsJson.text = json
    }
}

tasks.processResources.dependsOn(tasks.generateIconsJson)

